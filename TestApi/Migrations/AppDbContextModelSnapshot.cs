// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApi.Data;

#nullable disable

namespace TestApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Mark")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OutOf")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Result");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5850),
                            Mark = 3,
                            OutOf = 30,
                            TestId = 1,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5850),
                            Username = "Mark"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(7420),
                            Mark = 25,
                            OutOf = 30,
                            TestId = 1,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(7420),
                            Username = "Sarah"
                        });
                });

            modelBuilder.Entity("TestApi.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2540),
                            Description = "10",
                            QuestionId = 11,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2550)
                        },
                        new
                        {
                            Id = 2,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4130),
                            Description = "11",
                            QuestionId = 11,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4130)
                        },
                        new
                        {
                            Id = 3,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4130),
                            Description = "5",
                            QuestionId = 11,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4130)
                        },
                        new
                        {
                            Id = 4,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4130),
                            Description = "0",
                            QuestionId = 11,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4130)
                        },
                        new
                        {
                            Id = 5,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4130),
                            Description = "1",
                            QuestionId = 12,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4130)
                        },
                        new
                        {
                            Id = 6,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140),
                            Description = "2",
                            QuestionId = 12,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140)
                        },
                        new
                        {
                            Id = 7,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140),
                            Description = "3",
                            QuestionId = 12,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140)
                        },
                        new
                        {
                            Id = 8,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140),
                            Description = "4",
                            QuestionId = 12,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140)
                        },
                        new
                        {
                            Id = 9,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140),
                            Description = "Syntax error, missing bracket",
                            QuestionId = 13,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140)
                        },
                        new
                        {
                            Id = 10,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140),
                            Description = "No error",
                            QuestionId = 13,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4140)
                        },
                        new
                        {
                            Id = 11,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150),
                            Description = "Syntax error, missing semicolon",
                            QuestionId = 13,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150)
                        },
                        new
                        {
                            Id = 12,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150),
                            Description = "Logic error",
                            QuestionId = 13,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150)
                        },
                        new
                        {
                            Id = 13,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150),
                            Description = "Sorts the list by length of each string",
                            QuestionId = 14,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150)
                        },
                        new
                        {
                            Id = 14,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150),
                            Description = "Filters the list based on length",
                            QuestionId = 14,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150)
                        },
                        new
                        {
                            Id = 15,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150),
                            Description = "Returns the list without modification",
                            QuestionId = 14,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150)
                        },
                        new
                        {
                            Id = 16,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150),
                            Description = "Orders the list by string content",
                            QuestionId = 14,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150)
                        },
                        new
                        {
                            Id = 17,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150),
                            Description = "IndexOutOfRangeException",
                            QuestionId = 15,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4150)
                        },
                        new
                        {
                            Id = 18,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160),
                            Description = "NullReferenceException",
                            QuestionId = 15,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160)
                        },
                        new
                        {
                            Id = 19,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160),
                            Description = "ArgumentOutOfRangeException",
                            QuestionId = 15,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160)
                        },
                        new
                        {
                            Id = 20,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160),
                            Description = "ArgumentNullException",
                            QuestionId = 15,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160)
                        },
                        new
                        {
                            Id = 21,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160),
                            Description = "Returns 42",
                            QuestionId = 16,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160)
                        },
                        new
                        {
                            Id = 22,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160),
                            Description = "Returns 0",
                            QuestionId = 16,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160)
                        },
                        new
                        {
                            Id = 23,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160),
                            Description = "Returns null",
                            QuestionId = 16,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160)
                        },
                        new
                        {
                            Id = 24,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160),
                            Description = "Throws an exception",
                            QuestionId = 16,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4160)
                        },
                        new
                        {
                            Id = 25,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4170),
                            Description = "It allows asynchronous execution",
                            QuestionId = 17,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4170)
                        },
                        new
                        {
                            Id = 26,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4170),
                            Description = "It pauses the execution of a method",
                            QuestionId = 17,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4170)
                        },
                        new
                        {
                            Id = 27,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4170),
                            Description = "It throws an exception",
                            QuestionId = 17,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4170)
                        },
                        new
                        {
                            Id = 28,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4170),
                            Description = "It defines a lambda expression",
                            QuestionId = 17,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4170)
                        },
                        new
                        {
                            Id = 29,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200),
                            Description = "Add the closing parenthesis",
                            QuestionId = 18,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200)
                        },
                        new
                        {
                            Id = 30,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200),
                            Description = "Add a semicolon after 'HasValue'",
                            QuestionId = 18,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200)
                        },
                        new
                        {
                            Id = 31,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200),
                            Description = "Change 'HasValue' to 'Value'",
                            QuestionId = 18,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200)
                        },
                        new
                        {
                            Id = 32,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200),
                            Description = "Change 'num' to 'num.Value'",
                            QuestionId = 18,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200)
                        },
                        new
                        {
                            Id = 33,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200),
                            Description = "555",
                            QuestionId = 19,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200)
                        },
                        new
                        {
                            Id = 34,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200),
                            Description = "55",
                            QuestionId = 19,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4200)
                        },
                        new
                        {
                            Id = 35,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210),
                            Description = "50",
                            QuestionId = 19,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210)
                        },
                        new
                        {
                            Id = 36,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210),
                            Description = "5",
                            QuestionId = 19,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210)
                        },
                        new
                        {
                            Id = 37,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210),
                            Description = "Hello",
                            QuestionId = 20,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210)
                        },
                        new
                        {
                            Id = 38,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210),
                            Description = "Error",
                            QuestionId = 20,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210)
                        },
                        new
                        {
                            Id = 39,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210),
                            Description = "Nothing",
                            QuestionId = 20,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210)
                        },
                        new
                        {
                            Id = 40,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210),
                            Description = "null",
                            QuestionId = 20,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210)
                        },
                        new
                        {
                            Id = 41,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210),
                            Description = "Finds the maximum value",
                            QuestionId = 21,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4210)
                        },
                        new
                        {
                            Id = 42,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220),
                            Description = "Sorts the list",
                            QuestionId = 21,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220)
                        },
                        new
                        {
                            Id = 43,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220),
                            Description = "Filters the list",
                            QuestionId = 21,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220)
                        },
                        new
                        {
                            Id = 44,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220),
                            Description = "Reverses the list",
                            QuestionId = 21,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220)
                        },
                        new
                        {
                            Id = 45,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220),
                            Description = "Yes",
                            QuestionId = 22,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220)
                        },
                        new
                        {
                            Id = 46,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220),
                            Description = "No",
                            QuestionId = 22,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220)
                        },
                        new
                        {
                            Id = 47,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220),
                            Description = "Maybe",
                            QuestionId = 22,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220)
                        },
                        new
                        {
                            Id = 48,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220),
                            Description = "None",
                            QuestionId = 22,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220)
                        },
                        new
                        {
                            Id = 49,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220),
                            Description = "Increments the value of x",
                            QuestionId = 23,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4220)
                        },
                        new
                        {
                            Id = 50,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230),
                            Description = "Decrements the value of x",
                            QuestionId = 23,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230)
                        },
                        new
                        {
                            Id = 51,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230),
                            Description = "Compares the value of x",
                            QuestionId = 23,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230)
                        },
                        new
                        {
                            Id = 52,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230),
                            Description = "Assigns a new value to x",
                            QuestionId = 23,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230)
                        },
                        new
                        {
                            Id = 53,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230),
                            Description = "NullReferenceException",
                            QuestionId = 24,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230)
                        },
                        new
                        {
                            Id = 54,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230),
                            Description = "IndexOutOfRangeException",
                            QuestionId = 24,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230)
                        },
                        new
                        {
                            Id = 55,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230),
                            Description = "ArgumentNullException",
                            QuestionId = 24,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230)
                        },
                        new
                        {
                            Id = 56,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230),
                            Description = "ArgumentOutOfRangeException",
                            QuestionId = 24,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230)
                        },
                        new
                        {
                            Id = 57,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230),
                            Description = "True",
                            QuestionId = 25,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4230)
                        },
                        new
                        {
                            Id = 58,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4250),
                            Description = "False",
                            QuestionId = 25,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4250)
                        },
                        new
                        {
                            Id = 59,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4250),
                            Description = "No Output",
                            QuestionId = 25,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4250)
                        },
                        new
                        {
                            Id = 60,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4300),
                            Description = "Error",
                            QuestionId = 25,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310)
                        },
                        new
                        {
                            Id = 61,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310),
                            Description = "012",
                            QuestionId = 26,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310)
                        },
                        new
                        {
                            Id = 62,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310),
                            Description = "123",
                            QuestionId = 26,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310)
                        },
                        new
                        {
                            Id = 63,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310),
                            Description = "321",
                            QuestionId = 26,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310)
                        },
                        new
                        {
                            Id = 64,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310),
                            Description = "None",
                            QuestionId = 26,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310)
                        },
                        new
                        {
                            Id = 65,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310),
                            Description = "True",
                            QuestionId = 27,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310)
                        },
                        new
                        {
                            Id = 66,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4310),
                            Description = "False",
                            QuestionId = 27,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320)
                        },
                        new
                        {
                            Id = 67,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320),
                            Description = "Error",
                            QuestionId = 27,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320)
                        },
                        new
                        {
                            Id = 68,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320),
                            Description = "None",
                            QuestionId = 27,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320)
                        },
                        new
                        {
                            Id = 69,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320),
                            Description = "Fixes the lambda expression",
                            QuestionId = 28,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320)
                        },
                        new
                        {
                            Id = 70,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320),
                            Description = "Throws a compile error",
                            QuestionId = 28,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320)
                        },
                        new
                        {
                            Id = 71,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320),
                            Description = "Does nothing",
                            QuestionId = 28,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320)
                        },
                        new
                        {
                            Id = 72,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320),
                            Description = "Creates an infinite loop",
                            QuestionId = 28,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320)
                        },
                        new
                        {
                            Id = 73,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320),
                            Description = "2",
                            QuestionId = 29,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4320)
                        },
                        new
                        {
                            Id = 74,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330),
                            Description = "1",
                            QuestionId = 29,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330)
                        },
                        new
                        {
                            Id = 75,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330),
                            Description = "3",
                            QuestionId = 29,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330)
                        },
                        new
                        {
                            Id = 76,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330),
                            Description = "4",
                            QuestionId = 29,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330)
                        },
                        new
                        {
                            Id = 77,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330),
                            Description = "Default",
                            QuestionId = 30,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330)
                        },
                        new
                        {
                            Id = 78,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330),
                            Description = "One",
                            QuestionId = 30,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330)
                        },
                        new
                        {
                            Id = 79,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330),
                            Description = "Two",
                            QuestionId = 30,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330)
                        },
                        new
                        {
                            Id = 80,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330),
                            Description = "None",
                            QuestionId = 30,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4330)
                        });
                });

            modelBuilder.Entity("TestApi.Models.QBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QBank");
                });

            modelBuilder.Entity("TestApi.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Mark")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(920),
                            Description = "Which keyword is used to define a method in C# that does not return a value?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(920)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1960),
                            Description = "What is the default access modifier for a class in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1960)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1960),
                            Description = "Which of the following is NOT a value type in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1960)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1960),
                            Description = "What is the purpose of the 'using' statement in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1960)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1960),
                            Description = "What is the correct way to declare a nullable int in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1960)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1970),
                            Description = "What does the 'is' keyword do in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1970)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980),
                            Description = "Which exception is thrown when accessing an array element out of bounds in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980),
                            Description = "What is the purpose of the 'async' keyword in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980),
                            Description = "Which collection in C# is used to store key-value pairs?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980),
                            Description = "What is the base class for all types in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980)
                        },
                        new
                        {
                            Id = 11,
                            Code = "int x = 10; int y = x++; Console.WriteLine(y);",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980),
                            Description = "What is the output of this code?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1980)
                        },
                        new
                        {
                            Id = 12,
                            Code = "int[] numbers = { 1, 2, 3 }; var result = numbers.Where(x => x > 1).Count();",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1990),
                            Description = "What will this code return?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1990)
                        },
                        new
                        {
                            Id = 13,
                            Code = "if(x == 10) { Console.WriteLine(\"Hello\" }",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1990),
                            Description = "Identify the error in the following code.",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(1990)
                        },
                        new
                        {
                            Id = 14,
                            Code = "var query = list.OrderBy(x => x.Length).ToList();",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2060),
                            Description = "What does this LINQ query do?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2070)
                        },
                        new
                        {
                            Id = 15,
                            Code = "string[] arr = new string[1]; arr[1] = \"OutOfBounds\";",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2070),
                            Description = "What exception will this code throw?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2070)
                        },
                        new
                        {
                            Id = 16,
                            Code = "Task<int> GetResultAsync() { return Task.FromResult(42); }",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2070),
                            Description = "What does this method return?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2070)
                        },
                        new
                        {
                            Id = 17,
                            Code = "await Task.Delay(1000);",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2070),
                            Description = "What is the purpose of the 'await' keyword in this code?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2070)
                        },
                        new
                        {
                            Id = 18,
                            Code = "int? num = 5; if(num.HasValue Console.WriteLine(num.Value);",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2070),
                            Description = "Fix the syntax error in the following code.",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2070)
                        },
                        new
                        {
                            Id = 19,
                            Code = "Console.WriteLine(\"5\" + 5 + 5);",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080),
                            Description = "What will this print to the console?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080)
                        },
                        new
                        {
                            Id = 20,
                            Code = "Action greet = () => Console.WriteLine(\"Hello\"); greet();",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080),
                            Description = "What does this delegate do?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080)
                        },
                        new
                        {
                            Id = 21,
                            Code = "var max = numbers.Max();",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080),
                            Description = "Explain what this LINQ method does.",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080)
                        },
                        new
                        {
                            Id = 22,
                            Code = "int x = 5; Console.WriteLine(x > 3 ? \"Yes\" : \"No\");",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080),
                            Description = "What will be the output of this ternary operator?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080)
                        },
                        new
                        {
                            Id = 23,
                            Code = "void Increment(ref int x) { x++; }",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080),
                            Description = "What does the 'ref' keyword do in this code?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2080)
                        },
                        new
                        {
                            Id = 24,
                            Code = "object obj = null; Console.WriteLine(obj.ToString());",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090),
                            Description = "What exception does this code throw?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090)
                        },
                        new
                        {
                            Id = 25,
                            Code = "if(true) Console.WriteLine(\"True\"); else Console.WriteLine(\"False\");",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090),
                            Description = "What is the output of this conditional statement?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090)
                        },
                        new
                        {
                            Id = 26,
                            Code = "for(int i = 0; i < 3; i++) Console.Write(i);",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090),
                            Description = "What will this loop print?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090)
                        },
                        new
                        {
                            Id = 27,
                            Code = "bool result = (5 == 5) && (3 < 4);",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090),
                            Description = "What is the result of this expression?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090)
                        },
                        new
                        {
                            Id = 28,
                            Code = "Func<int, int> square = x => return x * x;",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090),
                            Description = "Fix the issue in this lambda expression.",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090)
                        },
                        new
                        {
                            Id = 29,
                            Code = "int[] nums = {1, 2, 3}; Console.WriteLine(nums[1]);",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2090),
                            Description = "What will this array print?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2100)
                        },
                        new
                        {
                            Id = 30,
                            Code = "switch(2) { case 1: Console.WriteLine(\"One\"); break; default: Console.WriteLine(\"Default\"); }",
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2100),
                            Description = "What does this 'switch' statement output?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(2100)
                        });
                });

            modelBuilder.Entity("TestApi.Models.QuestionBank", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QBankId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId", "QBankId");

                    b.HasIndex("QBankId");

                    b.ToTable("QuestionBank");
                });

            modelBuilder.Entity("TestApi.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Test");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 279, DateTimeKind.Utc).AddTicks(8590),
                            Description = "Test on the fundamentals of C#",
                            Name = "C# Basics",
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 279, DateTimeKind.Utc).AddTicks(8590)
                        });
                });

            modelBuilder.Entity("TestApi.Models.TestQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestion");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4690),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(4690)
                        },
                        new
                        {
                            QuestionId = 2,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5400),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5400)
                        },
                        new
                        {
                            QuestionId = 3,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410)
                        },
                        new
                        {
                            QuestionId = 4,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410)
                        },
                        new
                        {
                            QuestionId = 5,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410)
                        },
                        new
                        {
                            QuestionId = 6,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410)
                        },
                        new
                        {
                            QuestionId = 7,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410)
                        },
                        new
                        {
                            QuestionId = 8,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410)
                        },
                        new
                        {
                            QuestionId = 9,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5410),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            QuestionId = 10,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            QuestionId = 11,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            QuestionId = 12,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            QuestionId = 13,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            QuestionId = 14,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            QuestionId = 15,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            QuestionId = 16,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            QuestionId = 17,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5420)
                        },
                        new
                        {
                            QuestionId = 18,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            QuestionId = 19,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            QuestionId = 20,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            QuestionId = 21,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            QuestionId = 22,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            QuestionId = 23,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            QuestionId = 24,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            QuestionId = 25,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            QuestionId = 26,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440)
                        },
                        new
                        {
                            QuestionId = 27,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440)
                        },
                        new
                        {
                            QuestionId = 28,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440)
                        },
                        new
                        {
                            QuestionId = 29,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440)
                        },
                        new
                        {
                            QuestionId = 30,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440),
                            UpdatedAt = new DateTime(2024, 12, 2, 4, 6, 10, 280, DateTimeKind.Utc).AddTicks(5440)
                        });
                });

            modelBuilder.Entity("Result", b =>
                {
                    b.HasOne("TestApi.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestApi.Models.Option", b =>
                {
                    b.HasOne("TestApi.Models.Question", "Question")
                        .WithMany("Option")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestApi.Models.QuestionBank", b =>
                {
                    b.HasOne("TestApi.Models.QBank", "QBank")
                        .WithMany("QuestionBank")
                        .HasForeignKey("QBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApi.Models.Question", "Question")
                        .WithMany("QuestionBank")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QBank");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestApi.Models.TestQuestion", b =>
                {
                    b.HasOne("TestApi.Models.Question", "Question")
                        .WithMany("TestQuestion")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApi.Models.Test", "Test")
                        .WithMany("TestQuestion")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestApi.Models.QBank", b =>
                {
                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("TestApi.Models.Question", b =>
                {
                    b.Navigation("Option");

                    b.Navigation("QuestionBank");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("TestApi.Models.Test", b =>
                {
                    b.Navigation("TestQuestion");
                });
#pragma warning restore 612, 618
        }
    }
}
