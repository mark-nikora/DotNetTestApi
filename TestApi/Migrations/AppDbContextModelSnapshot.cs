// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApi.Data;

#nullable disable

namespace TestApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("TestApi.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3910),
                            Description = "void",
                            QuestionId = 1,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3910)
                        },
                        new
                        {
                            Id = 2,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5230),
                            Description = "return",
                            QuestionId = 1,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5230)
                        },
                        new
                        {
                            Id = 3,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5240),
                            Description = "method",
                            QuestionId = 1,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5240)
                        },
                        new
                        {
                            Id = 4,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5240),
                            Description = "empty",
                            QuestionId = 1,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5240)
                        },
                        new
                        {
                            Id = 5,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5240),
                            Description = "private",
                            QuestionId = 2,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5240)
                        },
                        new
                        {
                            Id = 6,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5240),
                            Description = "public",
                            QuestionId = 2,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5240)
                        },
                        new
                        {
                            Id = 7,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250),
                            Description = "internal",
                            QuestionId = 2,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250)
                        },
                        new
                        {
                            Id = 8,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250),
                            Description = "protected",
                            QuestionId = 2,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250)
                        },
                        new
                        {
                            Id = 9,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250),
                            Description = "int",
                            QuestionId = 3,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250)
                        },
                        new
                        {
                            Id = 10,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250),
                            Description = "float",
                            QuestionId = 3,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250)
                        },
                        new
                        {
                            Id = 11,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250),
                            Description = "decimal",
                            QuestionId = 3,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250)
                        },
                        new
                        {
                            Id = 12,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250),
                            Description = "string",
                            QuestionId = 3,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250)
                        },
                        new
                        {
                            Id = 13,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250),
                            Description = "To import namespaces",
                            QuestionId = 4,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5250)
                        },
                        new
                        {
                            Id = 14,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5260),
                            Description = "To declare variables",
                            QuestionId = 4,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5260)
                        },
                        new
                        {
                            Id = 15,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5260),
                            Description = "To execute cleanup code",
                            QuestionId = 4,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5260)
                        },
                        new
                        {
                            Id = 16,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5260),
                            Description = "To define methods",
                            QuestionId = 4,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5260)
                        },
                        new
                        {
                            Id = 17,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5260),
                            Description = "int num = null;",
                            QuestionId = 5,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5260)
                        },
                        new
                        {
                            Id = 18,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5290),
                            Description = "int? num = null;",
                            QuestionId = 5,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5290)
                        },
                        new
                        {
                            Id = 19,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5290),
                            Description = "nullable int num;",
                            QuestionId = 5,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5290)
                        },
                        new
                        {
                            Id = 20,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300),
                            Description = "num = null;",
                            QuestionId = 5,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300)
                        },
                        new
                        {
                            Id = 21,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300),
                            Description = "Checks if an object is a specific type",
                            QuestionId = 6,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300)
                        },
                        new
                        {
                            Id = 22,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300),
                            Description = "Creates a new object",
                            QuestionId = 6,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300)
                        },
                        new
                        {
                            Id = 23,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300),
                            Description = "Casts an object to a specific type",
                            QuestionId = 6,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300)
                        },
                        new
                        {
                            Id = 24,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300),
                            Description = "Compares two objects for equality",
                            QuestionId = 6,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300)
                        },
                        new
                        {
                            Id = 25,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300),
                            Description = "ArgumentException",
                            QuestionId = 7,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300)
                        },
                        new
                        {
                            Id = 26,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300),
                            Description = "IndexOutOfRangeException",
                            QuestionId = 7,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5300)
                        },
                        new
                        {
                            Id = 27,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310),
                            Description = "OutOfMemoryException",
                            QuestionId = 7,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310)
                        },
                        new
                        {
                            Id = 28,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310),
                            Description = "NullReferenceException",
                            QuestionId = 7,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310)
                        },
                        new
                        {
                            Id = 29,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310),
                            Description = "To define a background thread",
                            QuestionId = 8,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310)
                        },
                        new
                        {
                            Id = 30,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310),
                            Description = "To mark a method for asynchronous execution",
                            QuestionId = 8,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310)
                        },
                        new
                        {
                            Id = 31,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310),
                            Description = "To pause a method",
                            QuestionId = 8,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310)
                        },
                        new
                        {
                            Id = 32,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310),
                            Description = "To cancel a task",
                            QuestionId = 8,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310)
                        },
                        new
                        {
                            Id = 33,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310),
                            Description = "List",
                            QuestionId = 9,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5310)
                        },
                        new
                        {
                            Id = 34,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320),
                            Description = "Array",
                            QuestionId = 9,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320)
                        },
                        new
                        {
                            Id = 35,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320),
                            Description = "Dictionary",
                            QuestionId = 9,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320)
                        },
                        new
                        {
                            Id = 36,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320),
                            Description = "Queue",
                            QuestionId = 9,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320)
                        },
                        new
                        {
                            Id = 37,
                            Correct = true,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320),
                            Description = "System.Object",
                            QuestionId = 10,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320)
                        },
                        new
                        {
                            Id = 38,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320),
                            Description = "System.Type",
                            QuestionId = 10,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320)
                        },
                        new
                        {
                            Id = 39,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320),
                            Description = "System.Base",
                            QuestionId = 10,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320)
                        },
                        new
                        {
                            Id = 40,
                            Correct = false,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320),
                            Description = "System.Class",
                            QuestionId = 10,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5320)
                        });
                });

            modelBuilder.Entity("TestApi.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Mark")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(2690),
                            Description = "Which keyword is used to define a method in C# that does not return a value?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(2690)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3410),
                            Description = "What is the default access modifier for a class in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3410)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3420),
                            Description = "Which of the following is NOT a value type in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3420)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3420),
                            Description = "What is the purpose of the 'using' statement in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3420)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3420),
                            Description = "What is the correct way to declare a nullable int in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3420)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3430),
                            Description = "What does the 'is' keyword do in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3430)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3430),
                            Description = "Which exception is thrown when accessing an array element out of bounds in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3430)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3430),
                            Description = "What is the purpose of the 'async' keyword in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3430)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3430),
                            Description = "Which collection in C# is used to store key-value pairs?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3430)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3440),
                            Description = "What is the base class for all types in C#?",
                            Mark = 0,
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(3440)
                        });
                });

            modelBuilder.Entity("TestApi.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Test");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(780),
                            Description = "Test on the fundamendals of csharp",
                            Name = "C# Basics",
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(780)
                        });
                });

            modelBuilder.Entity("TestApi.Models.TestQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestion");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5680),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(5680)
                        },
                        new
                        {
                            QuestionId = 2,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6320),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6320)
                        },
                        new
                        {
                            QuestionId = 3,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6320),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6320)
                        },
                        new
                        {
                            QuestionId = 4,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6320),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6320)
                        },
                        new
                        {
                            QuestionId = 5,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6320),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6320)
                        },
                        new
                        {
                            QuestionId = 6,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330)
                        },
                        new
                        {
                            QuestionId = 7,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330)
                        },
                        new
                        {
                            QuestionId = 8,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330)
                        },
                        new
                        {
                            QuestionId = 9,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330)
                        },
                        new
                        {
                            QuestionId = 10,
                            TestId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330),
                            UpdatedAt = new DateTime(2024, 11, 25, 3, 30, 14, 216, DateTimeKind.Utc).AddTicks(6330)
                        });
                });

            modelBuilder.Entity("TestApi.Models.Option", b =>
                {
                    b.HasOne("TestApi.Models.Question", "Question")
                        .WithMany("Option")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestApi.Models.TestQuestion", b =>
                {
                    b.HasOne("TestApi.Models.Question", "Question")
                        .WithMany("TestQuestion")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApi.Models.Test", "Test")
                        .WithMany("TestQuestion")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestApi.Models.Question", b =>
                {
                    b.Navigation("Option");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("TestApi.Models.Test", b =>
                {
                    b.Navigation("TestQuestion");
                });
#pragma warning restore 612, 618
        }
    }
}
